const app = require("../app.js");
const debug = require("debug");
const http = require("http");
const mongoose = require("mongoose");
const { mongoURI: db } = require("../config/keys.js");

const serverLogger = debug("backend:server");
const dbLogger = debug("backend:mongodb");

const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

const server = http.createServer(app);

mongoose
  .connect(db, { useNewUrlParser: true })
  .then(() => {
    dbLogger("Connected to MongoDB successfully");

    server.listen(port);
  })
  .catch((err) => serverLogger(err));

server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  serverLogger("Listening on " + bind);
}
